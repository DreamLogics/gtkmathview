// Copyright (C) 2000, Luca Padovani <luca.padovani@cs.unibo.it>.
// 
// This file is part of GtkMathView, a Gtk widget for MathML.
// 
// GtkMathView is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// GtkMathView is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with GtkMathView; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// For details, see the GtkMathView World-Wide-Web page,
// http://cs.unibo.it/~lpadovan/mml-widget, or send a mail to
// <luca.padovani@cs.unibo.it>

#ifndef Array_icc
#define Array_icc

template <class Type>
Array<Type>::Array()
{
  size = 0;
  data = NULL;
}

template <class Type>
Array<Type>::Array(unsigned n, Type obj)
{
  size = 0;
  data = NULL;
  if (n > 0) SetSize(n, obj);
}

template <class Type>
Array<Type>::Array(const Array<Type>& cont)
{
  size = 0;
  data = NULL;
  SetSize(cont.GetSize());
  for (unsigned i = 0; i < size; i++) data[i] = cont.Get(i);
}

template <class Type>
Array<Type>::~Array()
{
  delete [] data;
}

template <class Type>
Type Array<Type>::Get(unsigned i) const
{
  assert(i < size);
  return data[i];
}

template <class Type>
void Array<Type>::Set(unsigned i, Type obj)
{
  assert(i < size);
  data[i] = obj;
}

template <class Type>
void Array<Type>::Add(Type obj)
{
  SetSize(size + 1, obj);
}

template <class Type>
void Array<Type>::SetSize(unsigned n, Type obj)
{
  Type* newData = (n > 0) ? new Type[n] : NULL;

  for (unsigned i = 0; i < n; i++) {
    if (i < size) newData[i] = data[i];
    else newData[i] = obj;
  }

  delete [] data;
  size = n;
  data = newData;
}

#endif
